package APIRequest;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.testng.Assert;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

public class Chrome1 {

	@BeforeTest
	public void startDocker()
	{
		String filepath=System.getProperty("user.dir")+"//output.txt";
		File file= new File(filepath);
		boolean deletefile=file.delete();
	    Assert.assertTrue(deletefile, "File is not deleted");
	    System.out.println("File Deleted Successfully");
		Startdocker sd=new Startdocker();
		try {
			sd.startFile();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	

@Test
public void google() throws MalformedURLException
{
		  URL url=new URL("http://localhost:4444/wd/hub"); 
		  DesiredCapabilities cap=DesiredCapabilities.chrome(); 
		  RemoteWebDriver driver= new  RemoteWebDriver(url,cap); 
		  driver.get("https://www.google.com/");
		  System.out.println("Title "+driver.getTitle()); 
	}

@AfterTest
public void stopDocker()
{
   stopDocker sd=new stopDocker();
   try {
	sd.stopFile();
} catch (IOException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
} catch (InterruptedException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
}

}


*******************************************************************************
package APIRequest;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.testng.annotations.Test;

public class Chrome2 {

@Test
public void yahoo() throws MalformedURLException
{
	
		  URL url=new URL("http://localhost:4444/wd/hub"); 
		  DesiredCapabilities cap=DesiredCapabilities.chrome(); 
		  RemoteWebDriver driver= new  RemoteWebDriver(url,cap); 
		  driver.get("https://www.yahoo.com/");
		  System.out.println("Title "+driver.getTitle()); 
		  driver.quit();
	}

}

*************************************************************************************

package APIRequest;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.testng.annotations.Test;

public class Chrome3 {

	
	@Test
	public void Gmail() throws MalformedURLException
	{
		  URL url=new URL("http://localhost:4444/wd/hub"); 
		  DesiredCapabilities cap=DesiredCapabilities.chrome(); 
		  RemoteWebDriver driver= new  RemoteWebDriver(url,cap); 
		  driver.get("https://www.gmail.com/");
		  System.out.println("Title "+driver.getTitle()); 
		  driver.quit();
	}

}

**********************************************
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite parallel="classes" name="Suite">
  <test thread-count="5" parallel="classes" name="Test">
    <classes>
      <class name="APIRequest.Chrome1"/>
      <class name="APIRequest.Chrome2"/>
      <class name="APIRequest.Chrome3"/>
    </classes>
  </test> <!-- Test -->
</suite> <!-- Suite -->


**************************************
# To execute this docker-compose yml file use `docker-compose -f docker-compose.yml up`
# Add the `-d` flag at the end for detached execution
# To stop the execution, hit Ctrl+C, and then `docker-compose -f docker-compose.yml down`
version: "3"
services:
  chrome:
    image: selenium/node-chrome:latest
    shm_size: 2gb
    depends_on:
      - selenium-hub
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443

  edge:
    image: selenium/node-edge:latest
    shm_size: 2gb
    depends_on:
      - selenium-hub
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443

  firefox:
    image: selenium/node-firefox:latest
    shm_size: 2gb
    depends_on:
      - selenium-hub
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443

  selenium-hub:
    image: selenium/hub:latest
    container_name: selenium-hub
    ports:
      - "4442:4442"
      - "4443:4443"
      - "4444:4444"


docker-compose -f docker-compose.yaml up >>output.txt

docker-compose up --scale chrome=4

docker-compose -f docker-compose.yaml down


package APIRequest;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Calendar;

import org.testng.Assert;
import org.testng.annotations.Test;

public class Startdocker {
	 
	public void startFile() throws IOException, InterruptedException
	{
		BufferedReader br;
		boolean flag=false;
		Runtime runtime=Runtime.getRuntime();
		runtime.exec("cmd /c start dockerUp.bat");
		String File=System.getProperty("user.dir")+"\\output.txt";
		System.out.println(File);
		Calendar cal=Calendar.getInstance(); //get current time
		cal.add(Calendar.SECOND, 50); //Adding 50 sec to the current time
		long stopnow=cal.getTimeInMillis(); //Getting the time in mili sec
		Thread.sleep(3000);
		while(System.currentTimeMillis()<stopnow)
		{
			if(flag)
			{
				break;
			}
		 br= new BufferedReader(new FileReader(File));
		String currentLine=br.readLine();
		while(currentLine!=null && !flag)
		{
			if(currentLine.contains("Node has been added")) {
			System.out.println("Found the required text");
			flag=true;
			break;
			}
			currentLine=br.readLine();
		}
		 br.close();
		}
		Assert.assertTrue(flag);
		Thread.sleep(5000);
		runtime.exec("cmd /c start scaleUpChrome.bat");
		Thread.sleep(5000);
	}

}

package APIRequest;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Calendar;

import org.testng.Assert;
import org.testng.annotations.Test;

public class stopDocker {
	
	 
	public void stopFile() throws IOException, InterruptedException
	{
		BufferedReader br;
		boolean flag=false;
		Runtime runtime=Runtime.getRuntime();
		runtime.exec("cmd /c start stopDocker.bat");
		String File=System.getProperty("user.dir")+"\\output.txt";
		System.out.println(File);
		Calendar cal=Calendar.getInstance(); //get current time
		cal.add(Calendar.SECOND, 50); //Adding 45 sec to the current time
		long stopnow=cal.getTimeInMillis(); //Getting the time in mili sec
		Thread.sleep(3000);
		while(System.currentTimeMillis()<stopnow)
		{
			if(flag)
			{
				break;
			}
		 br= new BufferedReader(new FileReader(File));
		String currentLine=br.readLine();
		while(currentLine!=null && !flag)
		{
			if(currentLine.contains("exited with code 143")) {
			System.out.println("Found the required text to delete");
			flag=true;
			break;
			}
			currentLine=br.readLine();
		}
		 br.close();
		}
		Assert.assertTrue(flag);
		Thread.sleep(5000);
		
	}

}




